import "./config.aqua"
import "./deploy.aqua"
import "./console.aqua"
import "./deal_spell.aqua"
import upload_workers, upload_deal from "./upload.aqua"

import Op, Srv from "@fluencelabs/aqua-lib/builtin.aqua"
import "@fluencelabs/aqua-lib/subnet.aqua"
import Spell, Log from "@fluencelabs/spell/spell_service.aqua"

func upload_deploy(config: LocalAppDeployConfig) -> DeployedAppWorkers:
    def <- upload_workers(config)
    deployed <- deploy(def)
    <- deployed

data LogsDirectResult:
    error: ?string
    spell_id: string
    worker_id: string
    host_id: string
    worker_name: string
    logs: []Log

func get_logs(app_workers: DeployedAppWorkers) -> []LogsDirectResult:
    logs: *LogsDirectResult
    for w <- app_workers.workers:
        for i <- w.installation_spells:
            on i.worker_id via i.host_id:
                Spell i.spell_id
                get_res <- Spell.get_logs()
                error: ?string
                if !get_res.success:
                    error <- Op.concat_strings("Failed to get logs: ", get_res.error)
                logs <<- LogsDirectResult(error = error, spell_id = i.spell_id, worker_id = i.worker_id, host_id = i.host_id, logs = get_res.logs, worker_name = w.name)

    <- logs

data LogsDeal:
    error: ?string
    host_id: string
    worker_id: ?string
    spell_id: ?string
    logs: []Log

data LogsDealResult:
    error: ?string
    deal_id: string
    logs: []LogsDeal

func get_logs_deal(deals: []string) -> []LogsDealResult:
    result: *LogsDealResult

    on HOST_PEER_ID:
        for deal_id <- deals:
            subnet_res <- Subnet.resolve(deal_id)
            if !subnet_res.success:
                error <- Op.concat_strings("Failed to resolve subnet: ", subnet_res.error!)
                result <<- LogsDealResult(deal_id = deal_id, success = false, error = ?[error], logs = nil)
            else:
                logs: *LogsDeal

                for w <- subnet_res.workers:
                    worker_id = w.worker_id
                    host_id = w.host_id
                    if w.worker_id == nil:
                        logs <<- LogsDeal(error = ?["Worker is not installed yet"], spell_id = nil, worker_id = nil, host_id = host_id, logs = nil)
                    else:
                        on worker_id! via host_id:
                            spell_id <- Srv.resolve_alias("worker-spell")
                            Spell spell_id
                            get_res <- Spell.get_logs()
                            error <- Op.concat_strings("Failed to get logs: ", get_res.error)
                            logs <<- LogsDeal(error = ?[error], spell_id = ?[spell_id], worker_id = worker_id, host_id = host_id, logs = get_res.logs)

                result <<- LogsDealResult(deal_id = deal_id, success = true, error = nil, logs = logs)

    <- result
