import TriggerConfig from "@fluencelabs/spell/spell_service.aqua"
import ModuleConfig, Op from "@fluencelabs/aqua-lib/builtin.aqua"

import CID, JsonString, Path, Multiaddr from "./types.aqua"
import IpfsClient from "./files.aqua"
import get_external_api_multiaddr from "@fluencelabs/aqua-ipfs/ipfs-api.aqua"

data Module:
    wasm: CID
    config: CID

data Service:
    name: string
    modules: []Module

data Spell:
    script: string
    config: TriggerConfig

data RemoteAppConfig:
    services: []Service
    spells: []Spell

service RACJson("json"):
    stringify(rac: RemoteAppConfig) -> JsonString
    parse(json: JsonString) -> RemoteAppConfig

data LocalModule:
    wasm: Path
    config: Path

data LocalService:
    name: string
    modules: []LocalModule

data LocalAppConfig:
    basedir: Path
    services: []LocalService
    -- TODO: add spells
    -- spells: []Spell

func upload_app_config(ipfs: Multiaddr, config: LocalAppConfig) -> CID:
    services: *Service
    for s <- config.services:
        modules: *Module
        for m <- s.modules:
            wasm <- IpfsClient.upload(ipfs, Op.concat_strings(config.basedir, m.wasm))
            cfg <- IpfsClient.upload(ipfs, Op.concat_strings(config.basedir, m.config))
            modules <<- Module(wasm = wasm, config = cfg)
        services <<- Service(name = s.name, modules = modules)
    rac = RemoteAppConfig(services = services, spells = [])
    json <- RACJson.stringify(rac)
    cid <- IpfsClient.upload_string(ipfs, json)
    <- cid

func upload_to_relay(config: LocalAppConfig) -> CID:
    on HOST_PEER_ID:
        ipfs <- get_external_api_multiaddr(HOST_PEER_ID)
        <- upload_app_config(ipfs.multiaddr, config)
