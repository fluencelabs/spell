--
-- Aqua Spell Service
--
-- Copyright (C) 2024 Fluence DAO
--
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Affero General Public License as
-- published by the Free Software Foundation version 3 of the
-- License.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Affero General Public License for more details.
--
-- You should have received a copy of the GNU Affero General Public License
-- along with this program.  If not, see <https://www.gnu.org/licenses/>.
--
aqua Config declares *

import TriggerConfig from "@fluencelabs/spell/spell_service.aqua"
import PeerId from "@fluencelabs/aqua-lib/builtin.aqua"
import SpellID from "@fluencelabs/spell/types.aqua"

import CID, JsonString, Path, Multiaddr, Address from "./types.aqua"

const IPFS = "/dns4/ipfs.fluence.dev/tcp/5001"

-- local DTOs
data LocalSpell:
    name: string
    script: string
    config: TriggerConfig
    init_args: âŠ¤

data LocalModule:
    name: string
    wasm: Path

data LocalService:
    name: string
    modules: []LocalModule
    total_memory_limit: u64

data LocalWorkerConfig:
    services: []LocalService
    spells: []LocalSpell

data LocalWorkerDeployConfig:
    name: string
    hosts: []PeerId
    config: LocalWorkerConfig
    dummy_deal_id: string

data LocalAppDeployConfig:
    installation_script: string
    installation_trigger: TriggerConfig
    workers: []LocalWorkerDeployConfig

-- uploaded DTOs
data Module:
    name: string
    wasm: CID

data Service:
    name: string
    modules: []Module
    total_memory_limit: u64

data SpellDefinition:
    name: string
    script: CID
    config: CID
    init_args: CID

data WorkerDefinition:
    services: []Service
    spells: []SpellDefinition

service WDJson("json"):
    stringify(wd: WorkerDefinition) -> JsonString
    parse(json: JsonString) -> WorkerDefinition

-- How to deploy a single worker definition to multiple hosts
data WorkerDeployDefinition:
    name: string
    hosts: []PeerId
    definition: CID -- stringified WorkerDefinition
    dummy_deal_id: string

data AppDeployDefinition:
    installation_script: string
    installation_trigger: TriggerConfig
    workers: []WorkerDeployDefinition

-- deployed DTOs
data DeployedSpell:
  host_id: PeerId
  worker_id: PeerId
  spell_id: SpellID

data DeployedWorkers:
  name: string
  installation_spells: []DeployedSpell
  definition: CID
  dummy_deal_id: string

data DeployedAppWorkers:
  workers: []DeployedWorkers
