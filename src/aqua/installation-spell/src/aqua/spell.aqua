import Op, Hash, Dist, Srv, Debug from "@fluencelabs/aqua-lib/builtin.aqua"
import and from "@fluencelabs/aqua-lib/binary.aqua"
import Ipfs from "@fluencelabs/aqua-ipfs/ipfs.aqua"
import Spell from "@fluencelabs/spell/spell_service.aqua"
import PeerSpell from "@fluencelabs/spell/api.aqua"
import Srv from "@fluencelabs/aqua-lib/builtin.aqua"

import WDJson, ModuleConfigJson, TriggerConfigJson, JsonStr from "./json.aqua"
import SpellDefinition, Service from "./config.aqua"
import Multiaddr, CID from "./types.aqua"
import log from "./log.aqua"
import "./status.aqua"

func blueprint_key(service_name: string) -> string:
    <- Op.concat_strings("blueprint:", service_name)

func config_key(spell_name: string) -> string:
    <- Op.concat_strings("trigger_config:", spell_name)

func init_args_key(spell_name: string) -> string:
    <- Op.concat_strings("init_args:", spell_name)

-- returns 'true' if service is in spell KV and has the same blueprint_id
-- returns 'false' otherwise
func is_deployed(service_name: string, blueprint_id: string) -> bool:
    result: ?bool

    Spell "worker-spell"
    deployed <- Spell.get_string(service_name)

    if and(deployed.success, deployed.absent):
        result <<- false
    else:
        srv_id = deployed.str
        info <- Srv.info(srv_id)
        if info.blueprint_id == blueprint_id:
            result <<- true
        else:
            log([service_name, "blueprint changed, need to redeploy"])
            try:
                -- TODO: should we do smth with the old service before removal?
                log([service_name, "removing old service", srv_id])
                Srv.remove(srv_id)
                log([service_name, "old service successfully removed", srv_id])
            catch e:
                log(["Error removing service", service_name, e])

            result <<- false

    <- result!

func is_spell_deployed(spell: SpellDefinition) -> bool:
    result: ?bool
    try:
        Spell "worker-spell"
        deployed <- Spell.get_string(spell.name)

        if and(deployed.success, deployed.absent):
            result <<- false
        else:
            -- TODO: update script without redeployment
            spell_id = deployed.str
            -- to check spell exists
            Srv.info(spell_id)

            Spell spell_id
            stored_script <- Spell.script_cid()
            log([spell_id, "script cid was:", stored_script.v1_str, "new:", spell.script])
            if stored_script.v1_str == spell.script:
                result <<- true
            else:
                log([spell.name, "script changed, need to redeploy"])
                -- TODO: should we do smth with the old spell before removal?
                log([spell.name, "removing old spell", spell_id])
                PeerSpell.remove(spell_id)
                log([spell.name, "old spell successfully removed", spell_id])
                result <<- false
    catch e:
        log(["Error check spell deployed", spell.name, e])
        result <<- false
    <- result!

func deploy_spell(spell: SpellDefinition, ipfs: Multiaddr):
    Spell "worker-spell"
    try:
        if is_spell_deployed(spell):
            log([spell.name, "spell is already deployed, checking config and init_args"])

            stored_config <- Spell.get_string(config_key(spell.name))
            if stored_config.str != spell.config:
                log([spell.name, "config mismath, updating config"])
                config_json <- Ipfs.cat_from(spell.config, ipfs)
                if config_json.success:
                    config <- TriggerConfigJson.parse(config_json.contents)

                    -- we can't use alias because of NET-418
                    spell_id <- Srv.resolve_alias(spell.name)
                    PeerSpell.update_trigger_config(spell_id, config)
                    Spell.set_string(config_key(spell.name), spell.config)
                    log([spell.name, "config successfully updated"])
                else:
                    log([spell.name, "error retrieving config", spell.config, config_json.error])

            stored_init_args <- Spell.get_string(init_args_key(spell.name))
            if stored_init_args.str != spell.init_args:
                log([spell.name, "init_args changed, updating"])
                new_init_args <- Ipfs.cat_from(spell.init_args, ipfs)
                if new_init_args.success:
                    Spell spell.name
                    Spell.set_json_fields(new_init_args.contents)
                else:
                    log([spell.name, "error retrieving init_args", spell.init_args, new_init_args.error])

                Spell "worker-spell"
                Spell.set_string(init_args_key(spell.name), spell.init_args)
                log([spell.name, "init_args successfully updated"])
        else:
            set_status(INSTALLATION_IN_PROGRESS)
            script <- Ipfs.cat_from(spell.script, ipfs)
            cfg_json <- Ipfs.cat_from(spell.config, ipfs)
            init_args_str <- Ipfs.cat_from(spell.init_args, ipfs)

            ipfs_ok <- and(and(script.success, cfg_json.success), init_args_str.success)
            if ipfs_ok:
                cfg <- TriggerConfigJson.parse(cfg_json.contents)
                init_args <- JsonStr.parse(init_args_str.contents)
                try:
                    sp_id <- PeerSpell.install(script.contents, init_args, cfg, spell.name)
                    log(["Installed spell", spell.name, sp_id])
                    Spell.set_string(spell.name, sp_id)
                    Spell.set_string(config_key(spell.name), spell.config)
                    Spell.set_string(init_args_key(spell.name), spell.init_args)
                catch e:
                    log(["Error installing the spell", spell.name, e])
            else:
                log([spell.name, "error retrieving from IPFS", ["script", spell.script, script], ["cfg_json", spell.config, cfg_json], ["init_args_str", spell.init_args, init_args_str]])
    catch e:
        log(["Error deploy spell", spell.name, e])

func download_service(s: Service, ipfs: Multiaddr) -> []Hash:
    hashes: *Hash
    for m <- s.modules:
        get_wasm <- Ipfs.get_from(m.wasm, ipfs)
        json_cfg <- Ipfs.cat_from(m.config, ipfs)
        ipfs_ok <- and(get_wasm.success, json_cfg.success)
        if ipfs_ok:
            cfg <- ModuleConfigJson.parse(json_cfg.contents)
            hashes <<- Dist.add_module_from_vault(get_wasm.path, cfg)
        else:
            log([s.name, "error retrieving module", ["wasm", m.wasm, get_wasm], ["config", m.config, json_cfg]])
    <- hashes

func install(ipfs: Multiaddr, worker_def_cid: CID):
    Spell "worker-spell"

    try:
        -- download App Config from IPFS
        json <- Ipfs.cat_from(worker_def_cid, ipfs)
        if json.success:
            worker_definition <- WDJson.parse(json.contents)
            log(["parsed worker definition", worker_def_cid, worker_definition])

            for s <- worker_definition.services:
                try:
                    hashes <- download_service(s, ipfs)
                    if hashes.length == s.modules.length:
                        blueprint <- Dist.make_blueprint(s.name, hashes)
                        blueprint_id <- Dist.add_blueprint(blueprint)

                        -- TODO: check that services are still alive
                        -- do not deploy if already deployed with the same blueprint
                        if is_deployed(s.name, blueprint_id) == false:
                            set_status(INSTALLATION_IN_PROGRESS)

                            service_id <- Srv.create(blueprint_id)
                            log(["Created service", s.name, service_id])
                            try:
                                Srv.add_alias(s.name, service_id)
                            catch e:
                                log(["Error creating alias for deployed service", s.name, service_id, e])

                            Spell.set_string(s.name, service_id)
                            Spell.set_string(blueprint_key(s.name), blueprint_id)
                        else:
                            log([s.name, "service is already deployed, doing nothing"])
                    else:
                        -- not all modules were retrieved
                        log([s.name, "error retrieving some of the modules, see above"])
                catch e:
                    log([s.name, "error deploying service", e])

            for sp <- worker_definition.spells:
                try:
                    log(["Deploying spell", sp.name])
                    deploy_spell(sp, ipfs)
                catch e:
                    log(["Error deploying spell", sp.name, e])

            log("Installation finished")
            last_status <- get_status()
            if last_status.state == INSTALLATION_IN_PROGRESS:
                set_status(INSTALLATION_SUCCESSFUL)

        else:
            error_msg = ["Error downloading worker definition from IPFS", ipfs, worker_def_cid, json]
            log(error_msg)
            set_status_msg(INSTALLATION_FAILED, Debug.stringify(error_msg))
    catch e:
        error_msg = ["Error installing worker", e]
        log(error_msg)
        set_status_msg(INSTALLATION_FAILED, Debug.stringify(error_msg))
