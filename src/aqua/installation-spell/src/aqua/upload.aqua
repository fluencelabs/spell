import AppDeployDefinition, LocalAppDeployConfig, LocalWorkerConfig, IPFS from "./config.aqua"
import Module, Service, SpellDefinition, WorkerDeployDefinition, WorkerDefinition from "./config.aqua"
import IpfsClient from "./files.aqua"
import Ipfs from "@fluencelabs/aqua-ipfs/ipfs.aqua"
import CID, JsonString, Path, Multiaddr, Address from "./types.aqua"
import TriggerConfigJson, Json, WDJson from "./json.aqua"
import Console from "./console.aqua"

func upload_worker_config(ipfs: Multiaddr, config: LocalWorkerConfig) -> CID:
    services: *Service
    spells: *SpellDefinition
    for s <- config.services:
        modules: *Module
        for m <- s.modules:
            wasm <- IpfsClient.upload(ipfs, m.wasm)
            cfg <- IpfsClient.upload_string(ipfs, m.config)
            modules <<- Module(wasm = wasm, config = cfg)
        services <<- Service(name = s.name, modules = modules)

    for sp <- config.spells:
        script <- IpfsClient.upload_string(ipfs, sp.script)
        cfg_str <- TriggerConfigJson.stringify(sp.config)
        cfg <- IpfsClient.upload_string(ipfs, cfg_str)
        init_args_str <- Json.stringify(sp.init_args)
        init_args <- IpfsClient.upload_string(ipfs, init_args_str)
        spells <<- SpellDefinition(name = sp.name, script = script, config = cfg, init_args = init_args)

    rac = WorkerDefinition(services = services, spells = spells)
    json <- WDJson.stringify(rac)
    cid <- IpfsClient.upload_string(ipfs, json)
    <- cid

func upload(config: LocalAppDeployConfig) -> AppDeployDefinition:
    deploy_defs: *WorkerDeployDefinition
    ipfs_multiaddr: ?Multiaddr

    if config.direct_deploy:
        on HOST_PEER_ID:
            res <- Ipfs.get_external_api_multiaddr()

        if res.success == false:
            Console.print(["Failed to get ipfs multiaddr: ", res.error])

        ipfs_multiaddr <<- res.multiaddr
    else:
        ipfs_multiaddr <<- IPFS

    for w <- config.workers:
        definition_cid <- upload_worker_config(ipfs_multiaddr!, w.config)
        deploy_defs <<- WorkerDeployDefinition(
            name = w.name,
            hosts = w.hosts,
            definition = definition_cid
        )

    deploy_definition = AppDeployDefinition(
        installation_script = config.installation_script,
        installation_trigger = config.installation_trigger,
        workers = deploy_defs,
        ipfs = ipfs_multiaddr!
    )
    <- deploy_definition
