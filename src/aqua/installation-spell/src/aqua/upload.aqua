--
-- Aqua Spell Service
--
-- Copyright (C) 2024 Fluence DAO
--
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Affero General Public License as
-- published by the Free Software Foundation version 3 of the
-- License.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Affero General Public License for more details.
--
-- You should have received a copy of the GNU Affero General Public License
-- along with this program.  If not, see <https://www.gnu.org/licenses/>.
--
aqua Upload declares *

export upload_worker_config, upload_workers, upload_deal

import Ipfs from "@fluencelabs/aqua-ipfs/ipfs.aqua"
import Array from "@fluencelabs/aqua-lib/math.aqua"

import AppDeployDefinition, LocalAppDeployConfig, LocalWorkerConfig, IPFS from "./config.aqua"
import Module, Service, SpellDefinition, WorkerDeployDefinition, WorkerDefinition from "./config.aqua"
import IpfsClient from "./files.aqua"
import CID, JsonString, Path, Multiaddr, Address from "./types.aqua"
import TriggerConfigJson, Json, WDJson from "./json.aqua"
import Console from "./console.aqua"

func upload_worker_config(ipfs: Multiaddr, config: LocalWorkerConfig) -> CID:
    services: *Service
    spells: *SpellDefinition
    for s <- config.services:
        modules: *Module
        for m <- s.modules:
            wasm <- IpfsClient.upload(ipfs, m.wasm)
            modules <<- Module(name = m.name, wasm = wasm)
        services <<- Service(name = s.name, modules = modules, total_memory_limit = s.total_memory_limit)

    for sp <- config.spells:
        script <- IpfsClient.upload_string(ipfs, sp.script)
        cfg_str <- TriggerConfigJson.stringify(sp.config)
        cfg <- IpfsClient.upload_string(ipfs, cfg_str)
        init_args_str <- Json.stringify(sp.init_args)
        init_args <- IpfsClient.upload_string(ipfs, init_args_str)
        spells <<- SpellDefinition(name = sp.name, script = script, config = cfg, init_args = init_args)

    rac = WorkerDefinition(services = services, spells = spells)
    json <- WDJson.stringify(rac)
    cid <- IpfsClient.upload_string(ipfs, json)
    <- cid

-- worker definition uploading for workers deploy
func upload_workers(config: LocalAppDeployConfig) -> AppDeployDefinition:
    deploy_defs: *WorkerDeployDefinition

    for w <- config.workers:
        hosts = Array.dedup(w.hosts)
        ipfs_multiaddrs: *Multiaddr
        for h <- hosts:
            on h via HOST_PEER_ID:
                res <- Ipfs.get_external_api_multiaddr()
                ipfs_multiaddrs <<- res.multiaddr
        ipfs <- Array.dedup(ipfs_multiaddrs)

        definition_cid: *CID
        for maddr <- ipfs:
            -- cids should be the same for all hosts
            -- but it definitely can be done better
            definition_cid <- upload_worker_config(maddr, w.config)

        deploy_defs <<- WorkerDeployDefinition(
            name = w.name,
            hosts = w.hosts,
            definition = definition_cid!,
            dummy_deal_id = w.dummy_deal_id
        )

    deploy_definition = AppDeployDefinition(
        installation_script = config.installation_script,
        installation_trigger = config.installation_trigger,
        workers = deploy_defs
    )
    <- deploy_definition

-- worker definition uploading for deal deploy
func upload_deal(config: LocalAppDeployConfig, ipfs: Multiaddr) -> AppDeployDefinition:
    deploy_defs: *WorkerDeployDefinition

    for w <- config.workers:
        definition_cid <- upload_worker_config(ipfs, w.config)
        deploy_defs <<- WorkerDeployDefinition(
            name = w.name,
            hosts = w.hosts,
            definition = definition_cid,
            dummy_deal_id = w.dummy_deal_id
        )

    deploy_definition = AppDeployDefinition(
        installation_script = config.installation_script,
        installation_trigger = config.installation_trigger,
        workers = deploy_defs
    )
    <- deploy_definition
