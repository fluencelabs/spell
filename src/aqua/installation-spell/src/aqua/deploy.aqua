--
-- Aqua Spell Service
--
-- Copyright (C) 2024 Fluence DAO
--
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Affero General Public License as
-- published by the Free Software Foundation version 3 of the
-- License.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Affero General Public License for more details.
--
-- You should have received a copy of the GNU Affero General Public License
-- along with this program.  If not, see <https://www.gnu.org/licenses/>.
--
aqua Deploy declares deploy

export deploy_single_worker, deploy, remove

import PeerSpell from "@fluencelabs/spell/api.aqua"
import TriggerConfig, Spell from "@fluencelabs/spell/spell_service.aqua"
import SpellID from "@fluencelabs/spell/types.aqua"
import Srv from "@fluencelabs/aqua-lib/builtin.aqua"
import Worker from "@fluencelabs/aqua-lib/workers.aqua"
import Ipfs from "@fluencelabs/aqua-ipfs/ipfs.aqua"

import IpfsClient, upload_script from "./files.aqua"
import WorkerSpellArgs, CID, WorkerID, Address, Multiaddr from "./types.aqua"
import IPFS, AppDeployDefinition, DeployedAppWorkers, DeployedSpell, DeployedWorkers from "./config.aqua"
import Json from "./json.aqua"
import Console from "./console.aqua"


func deploy_single_worker(
    air: string,
    trigger_config: TriggerConfig,
    ipfs: Multiaddr,
    worker_name: string,
    worker_definition: CID,
    dummy_deal_id: string
) -> SpellID, WorkerID:
    -- prepare spell arguments
    init_args = WorkerSpellArgs(ipfs = ipfs, h_worker_def_cid = worker_definition, deal_id = dummy_deal_id)

    worker_id: *WorkerID
    spell_id: *SpellID


    -- create Worker or retrieve an existing one via dummy DEAL_ID
    existing_worker <- Worker.get_worker_id(dummy_deal_id)
    if existing_worker == nil:
        cuid = [84, 174, 27, 80, 108, 38, 3, 103, 160, 84, 248, 8, 0, 165, 69, 242, 62, 50, 198, 188, 74, 137, 8, 201, 167, 148, 203, 141, 173, 35, 229, 234]
        worker_id <- Worker.create(dummy_deal_id, [cuid])
    else:
        worker_id <<- existing_worker!

    on worker_id!:
        -- Take existing worker-spell or create a new one
        try:
            resolved_spell_id <- Srv.resolve_alias("worker-spell")
            -- If spell already exists, update 'worker_def_cid' arg in its KV
            app_cid <- Json.stringify(worker_definition)
            Spell resolved_spell_id
            Spell.set_string("h_worker_def_cid", app_cid)
            spell_id <<- resolved_spell_id
        otherwise:
            -- Create new spell, 'worker_def_cid' will be passed in init_args
            spell_id <- PeerSpell.install(air, init_args, trigger_config, "worker-spell")

    <- spell_id!, worker_id!

func deploy(config: AppDeployDefinition) -> DeployedAppWorkers:
    workers: *DeployedWorkers
    for w <- config.workers:
        spells: *DeployedSpell
        for h <- w.hosts:
            on h:
                ipfs <- Ipfs.get_local_api_multiaddr()
                spell_id, worker_id <- deploy_single_worker(
                    config.installation_script,
                    config.installation_trigger,
                    ipfs.multiaddr,
                    w.name,
                    w.definition,
                    w.dummy_deal_id
                )
                spells <<- DeployedSpell(spell_id = spell_id, worker_id = worker_id, host_id = h)
                on INIT_PEER_ID via HOST_PEER_ID:
                    co Console.print(["deployed spell", spell_id, worker_id, "to", h])

        workers <<- DeployedWorkers(name = w.name, installation_spells = spells, definition = w.definition, dummy_deal_id = w.dummy_deal_id)
        on INIT_PEER_ID via HOST_PEER_ID:
            co Console.print(["deployed workers", workers])

    deployed = DeployedAppWorkers(workers = workers)
    <- deployed

data RemovedWorker:
    name: string
    worker_ids: []string

-- remove deployed workers
func remove(workers: DeployedAppWorkers) -> []RemovedWorker:
    removed_workers: *RemovedWorker
    for w <- workers.workers:
        removed_worker_ids: *string
        for h <- w.installation_spells:
            on h.host_id:
                -- This will raise an error if INIT_PEER_ID is different from Worker's owner
                -- That's because only the one who deployed the worker, can remove it
                Worker.remove(h.worker_id)
                removed_worker_ids <<- h.worker_id
                on INIT_PEER_ID via HOST_PEER_ID:
                    co Console.print(["removed worker", h.worker_id, "from", h.host_id])
        removed_workers <<- RemovedWorker(name = w.name, worker_ids = removed_worker_ids)

    Console.print(["workers successfully removed"])
    <- removed_workers
