import "@fluencelabs/aqua-lib/math.aqua"
import "../../src/aqua/spell/spell_service.aqua"

import "../../src/aqua/installation-spell/src/aqua/status.aqua"


service JsonStr("json"):
  parse(str: string) -> string

service JsonNum("json"):
  stringify(obj: i64) -> string
  parse(str: string) -> i64

service Json("json"):
  stringify(obj: âŠ¤) -> string

func inc_other_spell(fellow_spell_id: string):
    Spell fellow_spell_id
    result <- Spell.get_string("w_value")
    if result.success:
        value_num <- JsonNum.parse(result.value)
        value_new <- Math.add(value_num, 1)
        value_str <- JsonNum.stringify(value_new)
        Spell.set_string("w_value", value_str)
        

data IncState:
    value: i64

func inc_value(value: i64) -> IncState:
    result = value + 1
    obj = IncState(value = result)
    <- obj

data StatusMsg:
   status: string
   msg: string 

service JsonStatusMsg("json"):
    parse(s: string) -> StatusMsg


func status_spell(spell_id: string):
    Spell spell_id

    result <- Spell.pop_mailbox()
    if result.success && !result.absent:
        st <- JsonStatusMsg.parse(result.message!.message)
        set_status_msg(st.status, st.msg)
